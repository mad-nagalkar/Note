Indexing
accessing elements in a sequence (like strings, lists, or tuples) using their position
Indexing starts at 0, meaning the first element has index 0, the second has index 1, and so on.
Negative indices are also supported, where -1 refers to the last element, -2 to the second last, and so on. 


Basic Indexing
To access an element, use square brackets [] with the index inside,
		my_list = [10, 20, 30, 40, 50]
		print(my_list[0])  # Output: 10
		print(my_list[3])  # Output: 40
		print(my_list[-1]) # Output: 50

Slicing
Slicing extracts a portion of a sequence(strings, lists, and tuples) using a start and end index.
	syntax [start:end:step]
	start specifies the starting index (default is 0).
	end specifies the ending index (exclusive).
	step specifies the increment between indices (default is 1).
	
		my_list = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

		print(my_list[2:5])    # Output: [2, 3, 4]
		print(my_list[:4])    # Output: [0, 1, 2, 3]
		print(my_list[6:])    # Output: [6, 7, 8, 9]
		print(my_list[1:7:2])  # Output: [1, 3, 5]
		print(my_list[::2])   # Output: [0, 2, 4, 6, 8]
		print(my_list[::-1])  # Output: [9, 8, 7, 6, 5, 4, 3, 2, 1, 0] - Reverses the list

If start is omitted, it defaults to 0. If end is omitted, it defaults to the length of the sequence.
The syntax is [start:end], where start is inclusive and end is exclusive.
		my_string = "Hello, World!"
		print(my_string[0:5])  # Output: Hello
		print(my_string[7:])  # Output: World!
		print(my_string[:5])  # Output: Hello
		print(my_string[:])   # Output: Hello, World!


Strides--need to learn more on it
https://stackoverflow.com/questions/7770689/python-string-slicing-stride-clarification
https://www.digitalocean.com/community/tutorials/how-to-index-and-slice-strings-in-python-3

Index method
The index() method finds the index of the first occurrence of a value in a sequence.
		my_list = ['apple', 'banana', 'cherry']
		index_of_banana = my_list.index('banana')
		print(index_of_banana)  # Output: 1
