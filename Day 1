
STRING

represents a sequence of characters
It is just a word or a collection of characters
Strings are immutable
Immutability: Strings in Python are immutable, meaning that concatenation always creates a new string object.
 
They are defined by enclosing characters within single quotes ('...'), double quotes ("..."), or triple quotes ("""...""" or '''...''') for multi-line strings.
		string1 = 'Hello'
		string2 = "World"
		string3 = """This is a
		multi-line string"""
		
contain letters, numbers, symbols, and spaces
Individual characters within a string can be accessed using indexing

Strings support various operations such as concatenation, slicing, and formatting.
They also have built-in methods for tasks like converting case, searching, and replacing substrings.

concatenation
process of joining two or more strings into a single, new string.
1)Using the + operator
most straightforward way
		string1 = "Hello"
		string2 = "World"
		result = string1 + " " + string2
		print(result)  # Output: Hello World


ensure that all operands are strings.
If you need to concatenate a string with a number or other data type, convert it to a string first using str().
		number = 123
		string = "The number is: " + str(number)
		print(string) # Output: The number is: 123

2)Using the join() method
particularly efficient for concatenating multiple strings
		string_list = ["Hello", " ", "World", "!"]
		result = "".join(string_list)
		print(result)  # Output: Hello World!


3)Using f-strings (formatted string literals)
Way to add expressions inside string literals
		string1 = "Hello"
		string2 = "World"
		result = f"{string1} {string2}!"
		print(result)  # Output: Hello World!

4)Using the % operator (older method)
less modern compared to f-strings and format()
		string1 = "Hello"
		string2 = "World"
		result = "%s %s!" % (string1, string2)
		print(result) # Output: Hello World!
		
5)Using the format() method
more control over string formatting and can also be used for concatenation
		 string1 = "Hello"
		 string2 = "World"
		 result = "{} {}!".format(string1, string2)
		 print(result) # Output: Hello World!


		name = "anna"
		name += " is my name"
		print(name) # Output: anna is my name

Escaping Characters
scape characters are special sequences that begin with a backslash (`\`) and are used within string literals to represent characters that are otherwise difficult or impossible to type directly, or that have a special meaning in Python. 
They allow the inclusion of characters like newlines, tabs, quotes, or even the backslash itself, without causing syntax errors or unintended behavior.
https://www.w3schools.com/python/gloss_python_escape_characters.asp

Build-in methods for string OR string methods
https://www.w3schools.com/python/python_ref_string.asp


-----------------------------------------------------------------------------------
Operators 
special symbols in Python that perform operations on values and variables, known as operands

1)Arithmetic Operators(mathematical calculations)
2)Assignment Operators(Assign values to variables)
3)Comparison Operators(Compare two values)
4)Logical Operators(Combine or modify boolean expressions)
5)Identity Operators or Ternary operater(Check if two variables refer to the same object in memory)
6)Membership Operators(Test if a value is present in a sequence)
7)Bitwise Operators(Perform operations on individual bits of data)


Arithmetic Operator
+ (addition)
- (subtraction)
* (multiplication)
/ (division)
% (modulus - remainder of division)
// (floor division - quotient without decimal part)
** (exponentiation

Assignment Operators
= (assign)
+= (add and assign)
-= (subtract and assign)
*= (multiply and assign)
/= (divide and assign)
%= (modulus and assign)
//= (floor divide and assign)
**= (exponentiate and assign)
&= (bitwise AND and assign)
|= (bitwise OR and assign)
^= (bitwise XOR and assign)
>>= (bitwise right shift and assign)
<<= (bitwise left shift and assign)

Comparison Operators
== (equal to)
!= (not equal to)
> (greater than)
< (less than)
>= (greater than or equal to)
<= (less than or equal to)

Logical Operators/Boolean operators
and (logical AND)
or (logical OR)
not (logical NOT)

Identity Operators
is (identical)
is not (not identical)

Membership Operators
in (present)
not in (not present)

Bitwise Operators
& (bitwise AND)
| (bitwise OR)
^ (bitwise XOR)
~ (bitwise NOT)
<< (left shift)
>> (right shift)

Arithmetic Operator
100 days notes

Assignment Operators
		age = 18
		age += 2   # age = age + 2
		print(age) # Output: 20


		age = 18
		age *= 2   # age = age * 2
		print(age) # Output: 36

Comparison Operators
a = 1
b = 2

a == b #False
a != b #True
a > b  #False
a <= b #True

Logical Operators/Boolean operators
Python provides three logical operators: and, or, and not. 
These operators are used to combine or modify Boolean expressions (expressions that evaluate to True or False) and return a Boolean result.

and operator:
The and operator returns True if both operands are True.
If either operand is False, the and operator returns False.
It exhibits "short-circuiting" behavior: if the first operand is False, the second operand is not evaluated.

    print(True and True)   # Output: True
    print(True and False)  # Output: False
    print(False and True)  # Output: False
    print(False and False) # Output: False

	x = 5
	y = 10
	
	# Example: Both conditions are True
	if x > 0 and y > 0:
	    print("Both x and y are positive.") # This will be printed
	
	# Example: One condition is False
	if x > 0 and y < 5:
	    print("This will not be printed.")

or operator:
The or operator returns True if at least one of the operands is True.
It returns False only if both operands are False.
It also exhibits "short-circuiting" behavior: if the first operand is True, the second operand is not evaluated.

    print(True or True)    # Output: True
    print(True or False)   # Output: True
    print(False or True)   # Output: True
    print(False or False)  # Output: False

	age = 17
	has_permission = True
	
	# Example: One condition is True
	if age >= 18 or has_permission:
	    print("Eligible to proceed.") # This will be printed
	
	# Example: Both conditions are False
	if age < 10 or has_permission == False:
	    print("This will not be printed.")

not operator:
The not operator is a unary operator, meaning it operates on a single operand.
It inverts the Boolean value of its operand: not True evaluates to False, and not False evaluates to True.
    
    print(not True)   # Output: False
    print(not False)  # Output: True

	is_raining = False
	
	# Example: Reversing a False condition
	if not is_raining:
	    print("It's not raining, go outside!") # This will be printed
	
	# Example: Reversing a True condition
	is_sunny = True
	if not is_sunny:
	    print("This will not be printed.")
These logical operators are fundamental for constructing complex conditional statements and controlling program flow in Python. They are often used within if, elif, and while statements.

Identity Operators or Ternary
def is_adult(age):
	if age > 18:
		return True
	else:
		return False

def is_adult2(age)
	return True if age > 18 else False

Python identity operators are used to check if two variables refer to the exact same object in memory, rather than just having equal values. 
This distinction is crucial when working with mutable objects or when needing to confirm that two references point to the identical instance. 
Basically it is IF ELSE statment in single line.

There are two identity operators in Python: 
is: This operator returns True if both variables point to the same object in memory. Otherwise, it returns False.
	    a = [1, 2, 3]
	    b = a  # b now refers to the same list object as a
	    c = [1, 2, 3] # c is a new list object, even if its content is the same
	
	    print(a is b)  # Output: True (a and b are the same object)
	    print(a is c)  # Output: False (a and c are different objects)	

is not: This operator returns True if both variables do not point to the same object in memory. Otherwise, it returns False. 
	    x = "hello"
	    y = "world"
	    z = "hello"
	
	    print(x is not y)  # Output: True (x and y are different objects)
	    print(x is not z)  # Output: False (x and z might be the same object due to string interning for small strings)

Key Difference from Equality Operators (==):
While is checks for object identity (same memory location), the equality operator == checks for value equality. Two objects can have the same value but be distinct objects in memory.

	list1 = [1, 2, 3]
	list2 = [1, 2, 3]
	
	print(list1 == list2) # Output: True (values are equal)
	print(list1 is list2) # Output: False (different objects in memory)

Common Use Cases:
Checking for None: The is operator is the recommended way to check if a variable is None, as None is a singleton object in Python

	    my_variable = None
	    if my_variable is None:
	        print("Variable is None")

Comparing Custom Objects:
When working with instances of custom classes, is can determine if two variables refer to the exact same instance.
Performance Optimization (with caution):
In some specific cases, using is for immutable objects like small integers or strings that are "interned" by Python can be slightly faster than ==, but relying on interning behavior across different Python versions or implementations is generally not recommended for robust code.
----------------------------------------------------------------------------------
function 
block of organized, reusable code that performs a specific task.
help to break down larger programs into smaller, more manageable pieces, making code easier to read, write, and debug.
Set of code which only runs when it is called

defining a function
Functions are defined using the def keyword, followed by the function name, parentheses (), and a colon :
The code block within the function is indented.
		def function_name(parameters):
			"""Docstring explaining the function's purpose"""
			# Function body
			return value

Built in functions
https://www.w3schools.com/python/python_ref_functions.asp

abs()
round()




-----------------------------------------------------------------------------------
Indexing
accessing elements in a sequence (like strings, lists, or tuples) using their position
Indexing starts at 0, meaning the first element has index 0, the second has index 1, and so on.
Negative indices are also supported, where -1 refers to the last element, -2 to the second last, and so on. 


Basic Indexing
To access an element, use square brackets [] with the index inside,
		my_list = [10, 20, 30, 40, 50]
		print(my_list[0])  # Output: 10
		print(my_list[3])  # Output: 40
		print(my_list[-1]) # Output: 50

Slicing
Slicing extracts a portion of a sequence(strings, lists, and tuples) using a start and end index.
	syntax [start:end:step]
	start specifies the starting index (default is 0).
	end specifies the ending index (exclusive).
	step specifies the increment between indices (default is 1).
	
		my_list = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

		print(my_list[2:5])    # Output: [2, 3, 4]
		print(my_list[:4])    # Output: [0, 1, 2, 3]
		print(my_list[6:])    # Output: [6, 7, 8, 9]
		print(my_list[1:7:2])  # Output: [1, 3, 5]
		print(my_list[::2])   # Output: [0, 2, 4, 6, 8]
		print(my_list[::-1])  # Output: [9, 8, 7, 6, 5, 4, 3, 2, 1, 0] - Reverses the list

If start is omitted, it defaults to 0. If end is omitted, it defaults to the length of the sequence.
The syntax is [start:end], where start is inclusive and end is exclusive.
		my_string = "Hello, World!"
		print(my_string[0:5])  # Output: Hello
		print(my_string[7:])  # Output: World!
		print(my_string[:5])  # Output: Hello
		print(my_string[:])   # Output: Hello, World!


Strides--need to learn more on it
https://stackoverflow.com/questions/7770689/python-string-slicing-stride-clarification
https://www.digitalocean.com/community/tutorials/how-to-index-and-slice-strings-in-python-3

Index method
The index() method finds the index of the first occurrence of a value in a sequence.
		my_list = ['apple', 'banana', 'cherry']
		index_of_banana = my_list.index('banana')
		print(index_of_banana)  # Output: 1

-------------------------------------------------------------

Key word

Expressions and Statements 
Expressions-any sort of code that returns value
Statements-operation on value

program- serice of statements

comments
any things after #

-----------------------------------
checking data type

get data type

    name= "anna"
    print(type(name))

    <class 'str'>
    ----------
    name = "anna"
    print(type(name) == str)
    
    true
    --------

    name = "anna"
    print(isinstance(name, str))
  
    true
    -------------

    age = 29
    print(isinstance(age, int))

    true
    ------------

    age = 29
    print(isinstance(age, float))

    false
    -------------

Class Constructer or type convergen

    age = float(3.14)
    print(isinstance(age, float))

    true
    -----------------
    age = "3.14"
    print(isinstance(age, int))

    false
    ----------------
    age = int("3.14")
    print(isinstance(age, int))

    true
    -----------------

Casting

    pi = "3.14"
    age = int(pi)
    print(isinstance(age, int))

    true
    ------------------
---------------------------------------------------------------------
variable
can be characters, numberws and undersore
but can not start with number

name = 3.14
NAME = 3.14
name1 = 3.14
_name1 = 3.14
name_1 = 3.14

NOT POSSIBLE
123
name!
name%
any python key words similar to
for, if, while, import

Below both will give same output. use ";" to write in single line
  name = 3.14
  print(name)

  name = 3.14; print(name)
  ------------------------------------------------------

Data Type

1)Numeric Types:
int: Represents whole numbers (integers), positive or negative, with arbitrary precision.
float: Represents real numbers (floating-point numbers) with decimal points.
complex: Represents complex numbers with a real and imaginary part (e.g., 3 + 4j).
	name = 3 + 4j
	name2 = complex(3,4)

	print(name2.real, name2.imag)
	#Output 2.0 3.0
	this output will be in form of floats

2)Text Type:
str: Represents sequences of characters (strings), enclosed in single or double quotes.

3)Sequence Types:
list: An ordered, mutable collection of items, allowing duplicates and heterogeneous data types (e.g., [1, "hello", 3.14]).
tuple: An ordered, immutable collection of items, similar to lists but cannot be modified after creation (e.g., (1, "world", 2.71)).
range: An immutable sequence of numbers, often used in loops.

list:
Using Square Brackets:
	my_list = [1, 2, 3, "Python", True]  # List with mixed data types
Using the list() Constructor:
	my_list = list([1, 2, 3, "Python"])  # Using list constructor
List Comprehensions:
	squares = [x ** 2 for x in range(5)]  # List of squares

Accessing List Elements
Indexing: Access items using their index.
	print(my_list[0])  # Output: 1
Negative Indexing: Access from the end:
	print(my_list[-1])  # Output: True (last item)
Slicing: Access multiple items.
	print(my_list[1:3])  # Output: [2, 3]

Modifying Lists Adding Items:
Use append() to add items at the end:
	my_list.append("New Item")
Use insert(index, item) to add at a specific position:
	my_list.insert(1, "Inserted Item")
Use extend() to add multiple items:
	my_list.extend([10, 20])
Use += to add multiple items:
	my_list += [ 2, "yes"]

Modifying Lists Removing Items:
Use remove(value) to remove the first occurrence of the value:
	my_list.remove(2)  # Removes the first occurrence of 2
Use pop(index) to remove and return an item at a specific index:
	item = my_list.pop()  # Remove the last item and return it
Use clear() to remove all items:
	my_list.clear()  # Empties the list

Common Operations
List Length: Use len() to determine the number of items in a list:
	print(len(my_list))  # Outputs the number of elements
Sorting: Sort the items in a list with sort():
	my_list.sort()  # Sorts the list in place
Reversing: Use reverse() to reverse items:
	my_list.reverse()  # Reverses the list in place

sort and sorted 
https://www.geeksforgeeks.org/python/sort-in-python/



4)Mapping Type:
dict: An unordered collection of key-value pairs, where each key is unique and maps to a specific value (e.g., {"name": "Alice", "age": 30}).

5)Set Types:
set: An unordered collection of unique, immutable items. Duplicate elements are automatically removed (e.g., {1, 2, 3}).
frozenset: An immutable version of a set.

6)Boolean Type:
bool: Represents truth values, with only two possible values: True or False.

	done = False
	if done:
		print("yes")
	else:
		print("no")
	#output = no
rules: 
numbers are always True except 0.
	done = 0	#output = no
	done = 1	#output = yes
	done = -1	#output = yes
	done = 8	#output = yes

Strings, lists, tuples and sets are always True except they are empty
	done = ""	#output = no
	done = "point"	#output = yes

function any(), all() return True or False

any()
The any() function in Python is used to check if any element in an iterable (like a list, tuple, set, etc.) is True. It returns:
True if at least one element is True
False if all elements are False or the iterable is empty
get proper example

The all() function in Python is a built-in function that determines whether all elements within an iterable are considered "truthy."
get proper example


7)Binary Types:
bytes: Represents immutable sequences of bytes.
bytearray: Represents mutable sequences of bytes.
memoryview: Provides a memory-efficient way to access the internal data of an object.

8)None Type:
NoneType: Represents the absence of a value. The single value of this type is None.


--------------------------------------------------------
Operater


---------------------------------------------------------

ENUM
An enum (short for enumeration) is a symbolic name for a set of unique, constant values. 
It is defined using the Enum class from the enum module. 
Enums are useful when you have a fixed set of related values that you want to refer to by name rather than by an arbitrary number or string.

		from enum import Enum
		
		# Define an enumeration
		class Color(Enum):
		    RED = 1
		    GREEN = 2
		    BLUE = 3
		
		# Accessing enum members
		print(Color.RED)          # Output: Color.RED
		print(Color.RED.name)     # Output: RED
		print(Color.RED.value)    # Output: 1
		
		# Iterating through enum members
		for color in Color:
		    print(color)
		
		# Comparing enum members
		if Color.RED == Color.GREEN:
		    print("Colors are the same")
		else:
		    print("Colors are different")

Key Points:
Uniqueness: Enum members are unique and immutable.
Iteration: You can iterate over the members of an enum.
Comparison: Enum members can be compared using identity (is) or equality (==).
Enums are particularly helpful for improving code readability and reducing the risk of invalid values being used.

----------------------------------------------------------------

USER INPUT
can take user input using the input() function. This function reads a line of text entered by the user and returns it as a string.

	# Taking user input
	name = input("Enter your name: ")
	print(f"Hello, {name}!")

If you need to take numerical input, you can convert the input string to the desired type, such as int or float:

	# Taking integer input
	age = int(input("Enter your age: "))
	print(f"You are {age} years old.")
	
	# Taking float input
	height = float(input("Enter your height in meters: "))
	print(f"Your height is {height} meters.")

For multiple inputs in one line, you can use split():

	# Taking multiple inputs
	x, y = input("Enter two numbers separated by space: ").split()
	print(f"First number: {x}, Second number: {y}")

------------------------------------------------------

control statements

if
else
elif
--------------------------------------------------------





